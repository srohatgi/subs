// Generated by CoffeeScript 1.6.1
(function() {
  var Subscription, Subscriptions, s, subscriptions, _i, _len, _ref;

  Subscription = Backbone.Model.extend({
    defaults: {
      name: "noname",
      type: "notype",
      description: "nodescription",
      billing: "monthly",
      amount: 0,
      username: null,
      password: null
    }
  });

  Subscriptions = Backbone.Collection.extend({
    model: Subscription,
    localStorage: new Backbone.LocalStorage("subscriptions-backbone")
  });

  subscriptions = new Subscriptions;

  subscriptions.add([
    {
      name: "Netflix"
    }, {
      name: "Vonage"
    }, {
      name: "RedBox"
    }, {
      name: 'YouSendIt'
    }
  ]);

  subscriptions.on("sync", function(col, res, options) {
    return console.log("succesful sync");
  });

  subscriptions.on("error", function(col, xhr, options) {
    return console.log("error in sync " + col + ":" + xhr + ":" + options);
  });

  try {
    _ref = subscriptions.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      console.log("model(" + s.cid + "): " + (JSON.stringify(s)));
    }
    subscriptions.sync("create", subscriptions);
    console.log("added all models to localStorage");
  } catch (e) {
    console.log("error: " + e);
  }

  main_app.add('models', 'subscriptions', subscriptions);

}).call(this);
(function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
templates['subscription_detail_view.hbs'] = template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<h2>";
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</h2>\n<p>";
  if (stack1 = helpers.description) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.description; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</p>\n<p><a class=\"btn\" href=\"#\">Save &raquo;</a></p>\n";
  return buffer;
  });
})();(function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
templates['subscription_list_view.hbs'] = template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <li><a href=\"#subscription/"
    + escapeExpression(((stack1 = depth0.name),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"><i class=\"icon-chevron-right\"></i>"
    + escapeExpression(((stack1 = depth0.name),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</a></li>\n  ";
  return buffer;
  }

  buffer += "<ul class=\"nav nav-list bs-docs-sidenav\">\n	";
  stack1 = helpers.each.call(depth0, depth0.subscription, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>";
  return buffer;
  });
})();// Generated by CoffeeScript 1.4.0
(function() {
  var SubscriptionDetailView, subscription_detail_view;

  SubscriptionDetailView = Backbone.View.extend({
    el: $('#center_panel'),
    initialize: function() {
      return this.render();
    },
    template: Handlebars.templates['subscription_detail_view.hbs'],
    render: function() {
      this.$el.empty();
      this.$el.html(this.template({
        name: "Netflix",
        description: "Movie streaming service"
      }));
      return this;
    }
  });

  subscription_detail_view = new SubscriptionDetailView;

  main_app.add('views', 'subscription_detail_view', subscription_detail_view);

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var SubscriptionListView, subscription_list_view;

  SubscriptionListView = Backbone.View.extend({
    el: $('#side_panel'),
    initialize: function() {
      return this.render();
    },
    template: Handlebars.templates['subscription_list_view.hbs'],
    render: function() {
      this.$el.empty();
      this.$el.html(this.template({
        subscription: this.collection.toJSON()
      }));
      return this;
    }
  });

  subscription_list_view = new SubscriptionListView({
    collection: main_app.get('models', 'subscriptions')
  });

  main_app.add('views', 'subscription_list_view', subscription_list_view);

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootup;

  bootup = function() {
    var MainRouter, main_router;
    MainRouter = Backbone.Router.extend({
      routes: {
        "subscription/:name": "setupViews",
        "*actions": "defaultRoute"
      },
      setupViews: function(name) {
        var subscription_detail_view, subscription_list_view;
        console.log("detail on " + name + " requested");
        subscription_detail_view = main_app.get('views', 'subscription_detail_view');
        subscription_list_view = main_app.get('views', 'subscription_list_view');
        subscription_list_view.render();
        return subscription_detail_view.render();
      }
    });
    main_router = new MainRouter;
    main_router.on('route:defaultRoute', function(actions) {
      return alert(actions);
    });
    console.log("hello world app");
    main_app.add('routers', 'main_router', main_router);
    return Backbone.history.start();
  };

  $(document).ready(bootup);

}).call(this);
